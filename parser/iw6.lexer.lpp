/* Copyright 2020 xensik. All rights reserved.
//
// Use of this source code is governed by a GNU GPLv3 license
// that can be found in the LICENSE file.
*/
%option outfile="./IW6/lexer.cpp" header-file="./IW6/lexer.hpp"
%option reentrant
%option bison-bridge
%option noyywrap batch nounput noinput
%option never-interactive
%option nounistd

%{
#include "IW6.hpp"
#include "parser.hpp"
%}

RGX_FILEPATH        ([_A-Za-z0-9]+\\)+[_A-Za-z0-9]+
RGX_IDENTIFIER      [_A-Za-z][_A-Za-z0-9\-]*
RGX_STRING		    \"(?:\\.|[^\"])*?\"|\'(?:\\.|[^\'])*?\'
RGX_FLOAT		    -?[0-9]+\.(?:[0-9]*)?f?|\.[0-9]+f?
RGX_INTEGER		    -?[0-9]+
RGX_DEFAULT		    (.|\n)

%x COMMENT_BLOCK_STATE
%x DEVELOPER_BLOCK_STATE

%%

[ \t\n\r]

"//".*

"/*"					    { BEGIN(COMMENT_BLOCK_STATE); }
<COMMENT_BLOCK_STATE>(.|\n)
<COMMENT_BLOCK_STATE>"*/"	{ BEGIN(INITIAL); }

<INITIAL>"/#"				{ BEGIN(DEVELOPER_BLOCK_STATE); }
<DEVELOPER_BLOCK_STATE>"#/"	{ BEGIN(INITIAL); }	

"#include"			{ return TOK_INCLUDE; }
"#using_animtree"	{ return TOK_USING_ANIMTREE; }
"#animtree"			{ return TOK_ANIMTREE; }
"if"			    { return TOK_IF; }
"else"			    { return TOK_ELSE; }
"while"			    { return TOK_WHILE; }
"for"			    { return TOK_FOR; }
"foreach"			{ return TOK_FOREACH; }
"in"		        { return TOK_IN; }
"switch"		    { return TOK_SWITCH; }
"case"			    { return TOK_CASE; }
"default"		    { return TOK_DEFAULT; }
"break"			    { return TOK_BREAK; }
"continue"		    { return TOK_CONTINUE; }
"return"		    { return TOK_RETURN; }
"wait"			    { return TOK_WAIT; }
"waittill"			{ return TOK_WAITTILL; }
"waittillmatch"		{ return TOK_WAITTILLMATCH; }
"waittillframeend"	{ return TOK_WAITTILLFRAMEEND; }
"endon"			    { return TOK_ENDON; }
"notify"		    { return TOK_NOTIFY; }
"thread"		    { return TOK_THREAD; }
"undefined"		    { return TOK_UNDEFINED; }
"true"		        { return TOK_TRUE; }
"false"		        { return TOK_FALSE; }
"size"		        { return TOK_SIZE; }
"game"		        { return TOK_GAME; }
"level"		        { return TOK_LEVEL; }

"[]"                { return TOK_EMPTY_ARRAY; }
\(			        { return TOK_LPAREN; }
\)			        { return TOK_RPAREN; }
\{			        { return TOK_LBRACE; }
\}			        { return TOK_RBRACE; }
\[			        { return TOK_LBRACKET; }
\]			        { return TOK_RBRACKET; }
\,			        { return TOK_COMMA; }
\.			        { return TOK_DOT; }
\:\:		        { return TOK_DOUBLECOLON; }
\:			        { return TOK_COLON; }
\;			        { return TOK_SEMICOLON; }
\?			        { return TOK_QMARK; }

\+\+		        { return TOK_INC; }
\-\-		        { return TOK_DEC; }
\<\<\=		        { return TOK_ASSIGN_LSHIFT; }
\>\>\=		        { return TOK_ASSIGN_RSHIFT; }
\<\<		        { return TOK_LSHIFT; }
\>\>		        { return TOK_RSHIFT; }
\|\|		        { return TOK_CMP_OR; }
\&\&		        { return TOK_CMP_AND; }
\=\=		        { return TOK_CMP_EQUAL; }
\!\=		        { return TOK_CMP_NOT_EQ; }
\<\=		        { return TOK_CMP_LESS_EQ; }
\>\=		        { return TOK_CMP_GREATER_EQ; }
\<			        { return TOK_CMP_LESS; }
\>			        { return TOK_CMP_GREATER; }
\+\=		        { return TOK_ASSIGN_ADD; }
\-\=		        { return TOK_ASSIGN_SUB; }
\*\=		        { return TOK_ASSIGN_MULT; }
\/\=			    { return TOK_ASSIGN_DIV; }
\%\=			    { return TOK_ASSIGN_MOD; }
\|\=		        { return TOK_ASSIGN_BW_OR; }
\&\=		        { return TOK_ASSIGN_BW_AND; }
\^\=		        { return TOK_ASSIGN_BW_XOR; }
\=			        { return TOK_ASSIGN; }
\+			        { return TOK_ADD; }
\-			        { return TOK_SUB; }
\*			        { return TOK_MULT; }
\/			        { return TOK_DIV; }
\%			        { return TOK_MOD; }
\!			        { return TOK_NOT; }
\~			        { return TOK_COMPLEMENT; }
\|			        { return TOK_BW_OR; }
\&			        { return TOK_BW_AND; }
\^			        { return TOK_BW_XOR; }

{RGX_FILEPATH}		{ yylval->value_string = strdup(yytext); return TOK_FILEPATH; }
{RGX_IDENTIFIER}	{ yylval->value_string = strdup(yytext); return TOK_IDENTIFIER; }
\#{RGX_STRING}	    { yylval->value_string = strdup(yytext); return TOK_STRING_HASH; }
\&{RGX_STRING}	    { yylval->value_string = strdup(yytext); return TOK_STRING_LOC; }
{RGX_STRING}	    { yylval->value_string = strdup(yytext); return TOK_STRING; }
{RGX_FLOAT}		    { yylval->value_string = strdup(yytext); return TOK_FLOAT; }
{RGX_INTEGER}	    { yylval->value_string = strdup(yytext); return TOK_INTEGER; }

<<EOF>>             { return TOK_EOF; }
<*>{RGX_DEFAULT}    { printf("yylex error: unexpected character"); }
%%
