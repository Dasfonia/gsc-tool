/* Copyright 2021 xensik. All rights reserved.
//
// Use of this source code is governed by a GNU GPLv3 license
// that can be found in the LICENSE file.
*/

%require "3.7"
%skeleton "lalr1.cc"
%language "c++"
%output "./H1/compiler_parser.cpp"
%defines "./H1/compiler_parser.hpp"

%define api.prefix {H1}
%define api.namespace {H1}
%define api.value.type variant
%define api.token.constructor
%define api.token.raw
%define parse.assert
%define parse.trace
%define parse.error detailed
%define parse.lac full

%lex-param  { yyscan_t yyscanner }
%lex-param  { std::uint32_t *location }
%parse-param { yyscan_t yyscanner }
%parse-param  { std::uint32_t *location }
%parse-param { gsc::script_ptr& astout }

%code requires
{
	#include <utils.hpp>
	typedef void *yyscan_t;
	#define YY_DECL H1::parser::symbol_type H1lex(yyscan_t yyscanner, std::uint32_t *location)
}

%code top
{
    #include "H1.hpp"
	#include "compiler_parser.hpp"
	#include "compiler_lexer.hpp"
	H1::parser::symbol_type H1lex(yyscan_t yyscanner, std::uint32_t *location);
}

%token INCLUDE USING_ANIMTREE ANIMTREE IF ELSE SWITCH
%token CASE DEFAULT BREAK FOR FOREACH WHILE CONTINUE
%token RETURN THREAD CALL WAIT WAITTILL WAITTILLMATCH WAITTILLFRAMEEND WAITFRAME
%token ENDON NOTIFY IN UNDEFINED TRUE FALSE SIZE GAME LEVEL ANIM SELF
%token EMPTY_ARRAY LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token COMMA DOT DOUBLECOLON COLON SEMICOLON QMARK
%token MOD INCREMENT DECREMENT LSHIFT RSHIFT OR AND EQUALITY
%token INEQUALITY LESS_EQUAL GREATER_EQUAL LESS GREATER 
%token ASSIGN ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV ASSIGN_MOD
%token ASSIGN_BITWISE_OR ASSIGN_BITWISE_AND ASSIGN_BITWISE_EXOR ASSIGN_LSHIFT ASSIGN_RSHIFT
%token BITWISE_OR BITWISE_AND BITWISE_EXOR ADD SUB MULT DIV NOT COMPLEMENT

%token <std::string> FILEPATH IDENTIFIER ANIMREF STRING STRING_LOC FLOAT INTEGER

%type <gsc::script_ptr> 				script
%type <gsc::include_ptr> 				include
%type <gsc::using_animtree_ptr> 		using_animtree
%type <gsc::using_animtree_ptr> 		animtree
%type <gsc::thread_ptr> 				thread
%type <gsc::parameters_ptr> 			parameters
%type <gsc::block_ptr> 					block
%type <gsc::stmt_ptr> 					stmt
%type <gsc::stmt_call_ptr> 				stmt_call
%type <gsc::stmt_assign_ptr> 			stmt_assign
%type <gsc::stmt_endon_ptr> 			stmt_endon
%type <gsc::stmt_notify_ptr> 			stmt_notify
%type <gsc::stmt_wait_ptr> 				stmt_wait
%type <gsc::stmt_waittill_ptr> 			stmt_waittill
%type <gsc::stmt_waittillmatch_ptr> 	stmt_waittillmatch
%type <gsc::stmt_waittillframeend_ptr> 	stmt_waittillframeend
%type <gsc::stmt_waitframe_ptr> 	    stmt_waitframe
%type <gsc::stmt_if_ptr> 				stmt_if
%type <gsc::stmt_ifelse_ptr> 			stmt_ifelse
%type <gsc::stmt_while_ptr> 			stmt_while
%type <gsc::stmt_for_ptr> 				stmt_for
%type <gsc::stmt_foreach_ptr> 			stmt_foreach
%type <gsc::stmt_switch_ptr> 			stmt_switch
%type <gsc::stmt_case_ptr> 				stmt_case
%type <gsc::stmt_default_ptr> 			stmt_default
%type <gsc::stmt_break_ptr> 			stmt_break
%type <gsc::stmt_continue_ptr> 			stmt_continue
%type <gsc::stmt_return_ptr> 			stmt_return
%type <gsc::expr_ptr> 					for_assign for_cond
%type <gsc::expr_assign_ptr> 			expr_assign
%type <gsc::expr_ptr> 					expr expr_cmp expr_primitive expr_binary expr_ternary
%type <gsc::expr_call_ptr> 				expr_call expr_call_thread
%type <gsc::expr_call_type_ptr> 		expr_call_function expr_call_pointer
%type <gsc::expr_arguments_ptr> 		expr_arguments
%type <gsc::node_ptr> 					expr_function_ref
%type <gsc::node_ptr> 					expr_array   
%type <gsc::node_ptr> 					expr_field
%type <gsc::node_ptr> 					expr_size
%type <gsc::node_ptr> 					expr_vector
%type <gsc::node_ptr> 					expr_add_array
%type <gsc::node_ptr> 					object
%type <gsc::node_ptr> 					vector       
%type <gsc::node_ptr> 					num
%type <gsc::node_ptr> 					false true 
%type <gsc::float_ptr> 					data_float
%type <gsc::integer_ptr> 				data_integer
%type <gsc::localized_string_ptr> 		data_localized_string
%type <gsc::string_ptr> 				data_string
%type <gsc::animref_ptr> 			    animref
%type <gsc::identifier_ptr> 			identifier
%type <gsc::filepath_ptr> 				filepath
%type <gsc::node_ptr> 					level anim self game size undefined empty_array

%nonassoc IFX
%nonassoc ELSE

%start root

%%

root
	: script { astout = std::move($1); }
	|        { astout = std::make_unique<gsc::node_script>(); }
	;

script
	: script include
		{ $$ = std::move($1); $$->includes.push_back(std::move($2)); }
	| script using_animtree
		{ $$ = std::move($1); $$->animtrees.push_back(std::move($2)); }
	| script animtree
		{ $$ = std::move($1); $$->animtrees.push_back(std::move($2)); }
	| script thread
		{ $$ = std::move($1); $$->threads.push_back(std::move($2)); }
	| include
		{ $$ = std::make_unique<gsc::node_script>(std::to_string(*location)); $$->includes.push_back(std::move($1));}
	| using_animtree
		{ $$ = std::make_unique<gsc::node_script>(std::to_string(*location)); $$->animtrees.push_back(std::move($1));}
	| animtree
		{ $$ = std::make_unique<gsc::node_script>(std::to_string(*location)); $$->animtrees.push_back(std::move($1));}
	| thread
		{ $$ = std::make_unique<gsc::node_script>(std::to_string(*location)); $$->threads.push_back(std::move($1));}
	;

include
	: INCLUDE filepath SEMICOLON
		{ $$ = std::make_unique<gsc::node_include>(std::to_string(*location), std::move($2)); }
	;

using_animtree
	: USING_ANIMTREE LPAREN data_string RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_using_animtree>(std::to_string(*location), std::move($3)); }
	;

animtree
	: ANIMTREE LPAREN data_string RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_using_animtree>(std::to_string(*location), std::move($3)); }
	;

thread
	: identifier LPAREN parameters RPAREN LBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_thread>(std::to_string(*location), std::move($1), std::move($3), std::move($6)); }
	;

parameters
	: parameters COMMA identifier
		{ $$ = std::move($1); $$->list.push_back(std::move($3)); }
	| identifier
		{ $$ = std::make_unique<gsc::node_parameters>(std::to_string(*location)); $$->list.push_back(std::move($1)); }
	|
		{ $$ = std::make_unique<gsc::node_parameters>(std::to_string(*location)); }
	;

block
	: block stmt
		{ $$ = std::move($1); $$->stmts.push_back(std::move($2)); }
	| stmt
		{ $$ = std::make_unique<gsc::node_block>(std::to_string(*location)); $$->stmts.push_back(std::move($1)); }
	|
		{ $$ = std::make_unique<gsc::node_block>(std::to_string(*location)); }
	;

stmt
	: stmt_call 								{ $$.as_call = std::move($1); }
	| stmt_assign 								{ $$.as_assign = std::move($1); }
	| stmt_endon 								{ $$.as_endon = std::move($1); }
	| stmt_notify 								{ $$.as_notify = std::move($1); }
	| stmt_wait 								{ $$.as_wait = std::move($1); }
	| stmt_waittill 							{ $$.as_waittill = std::move($1); }
	| stmt_waittillmatch 						{ $$.as_waittillmatch = std::move($1); }
	| stmt_waittillframeend 					{ $$.as_waittillframeend = std::move($1); }
	| stmt_waitframe 						    { $$.as_waitframe = std::move($1); }
	| stmt_if									{ $$.as_if = std::move($1); }
	| stmt_ifelse								{ $$.as_ifelse = std::move($1); }
	| stmt_while								{ $$.as_while = std::move($1); }
	| stmt_for									{ $$.as_for = std::move($1); }
	| stmt_foreach								{ $$.as_foreach = std::move($1); }
	| stmt_switch								{ $$.as_switch = std::move($1); }
	| stmt_case									{ $$.as_case = std::move($1); }
	| stmt_default								{ $$.as_default = std::move($1); }
	| stmt_break								{ $$.as_break = std::move($1); }
	| stmt_continue								{ $$.as_continue = std::move($1); }
	| stmt_return								{ $$.as_return = std::move($1); }
	;

stmt_call
	: expr_call SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_call>(std::to_string(*location), std::move($1)); }
	| expr_call_thread SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_call>(std::to_string(*location), std::move($1)); }
	;

stmt_assign
	: expr_assign SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_assign>(std::to_string(*location), std::move($1)); }
	;

stmt_endon
	: object ENDON LPAREN expr RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_endon>(std::to_string(*location), std::move($1), std::move($4)); }
	;

stmt_notify
	: object NOTIFY LPAREN expr COMMA expr_arguments RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_notify>(std::to_string(*location), std::move($1), std::move($4), std::move($6)); }
	| object NOTIFY LPAREN expr RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_notify>(std::to_string(*location), std::move($1), std::move($4), std::make_unique<gsc::node_expr_arguments>(std::to_string(*location))); }
	;

stmt_wait
	: WAIT LPAREN expr RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_wait>(std::to_string(*location), std::move($3)); }
	| WAIT num SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_wait>(std::to_string(*location), std::move($2)); }
	;

stmt_waittill
	: object WAITTILL LPAREN expr COMMA expr_arguments RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_waittill>(std::to_string(*location), std::move($1), std::move($4), std::move($6)); }
	| object WAITTILL LPAREN expr RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_waittill>(std::to_string(*location), std::move($1), std::move($4), std::make_unique<gsc::node_expr_arguments>(std::to_string(*location))); }
	;

stmt_waittillmatch
	: object WAITTILLMATCH LPAREN expr COMMA expr RPAREN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_waittillmatch>(std::to_string(*location), std::move($1), std::move($4), std::move($6)); }
	;

stmt_waittillframeend
	: WAITTILLFRAMEEND SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_waittillframeend>(std::to_string(*location)); }
	;

stmt_waitframe
	: WAITFRAME SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_waitframe>(std::to_string(*location)); }
	;

stmt_if
	: IF LPAREN expr RPAREN LBRACE block RBRACE %prec IFX
		{ $$ = std::make_unique<gsc::node_stmt_if>(std::to_string(*location), std::move($3), std::move($6)); }
	| IF LPAREN expr RPAREN stmt %prec IFX
		{
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($5));
			$$ = std::make_unique<gsc::node_stmt_if>(std::to_string(*location), std::move($3), std::move(blk)); }
	;

stmt_ifelse
	: IF LPAREN expr RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_stmt_ifelse>(std::to_string(*location), std::move($3), std::move($6), std::move($10)); }
	| IF LPAREN expr RPAREN stmt ELSE LBRACE block RBRACE
		{
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($5));
			$$ = std::make_unique<gsc::node_stmt_ifelse>(std::to_string(*location), std::move($3), std::move(blk), std::move($8)); }
	| IF LPAREN expr RPAREN LBRACE block RBRACE ELSE stmt
		{ 
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($9));
			$$ = std::make_unique<gsc::node_stmt_ifelse>(std::to_string(*location), std::move($3), std::move($6), std::move(blk)); }
	| IF LPAREN expr RPAREN stmt ELSE stmt
		{
			auto blk1 = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk1->stmts.push_back(std::move($5));
			auto blk2 = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk2->stmts.push_back(std::move($7));
			$$ = std::make_unique<gsc::node_stmt_ifelse>(std::to_string(*location), std::move($3), std::move(blk1), std::move(blk2)); }
	;

stmt_while
	: WHILE LPAREN expr RPAREN LBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_stmt_while>(std::to_string(*location), std::move($3), std::move($6)); }
	| WHILE LPAREN expr RPAREN stmt
		{
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($5));
			$$ = std::make_unique<gsc::node_stmt_while>(std::to_string(*location), std::move($3), std::move(blk)); }
	;

stmt_for
	: FOR LPAREN for_assign SEMICOLON for_cond SEMICOLON for_assign RPAREN LBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_stmt_for>(std::to_string(*location), std::move($3), std::move($5), std::move($7), std::move($10)); }
	|FOR LPAREN for_assign SEMICOLON for_cond SEMICOLON for_assign RPAREN stmt
		{
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($9));
			$$ = std::make_unique<gsc::node_stmt_for>(std::to_string(*location), std::move($3), std::move($5), std::move($7), std::move(blk));
		}
	;

stmt_foreach
	: FOREACH LPAREN expr IN expr RPAREN RBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_stmt_foreach>(std::to_string(*location), std::move($3), std::move($5), std::move($8)); }
	| FOREACH LPAREN expr IN expr RPAREN stmt
		{
			auto blk = std::make_unique<gsc::node_block>(std::to_string(*location));
			blk->stmts.push_back(std::move($7));
			$$ = std::make_unique<gsc::node_stmt_foreach>(std::to_string(*location), std::move($3), std::move($5), std::move(blk));
		}
	;

stmt_switch
	: SWITCH LPAREN expr RPAREN LBRACE block RBRACE
		{ $$ = std::make_unique<gsc::node_stmt_switch>(std::to_string(*location), std::move($3), std::move($6)); }
	;

stmt_case
	: CASE data_integer COLON
		{ $$ = std::make_unique<gsc::node_stmt_case>(std::to_string(*location), gsc::expr_ptr(std::move($2))); }
	| CASE data_string COLON
		{ $$ = std::make_unique<gsc::node_stmt_case>(std::to_string(*location), gsc::expr_ptr(std::move($2))); }
	;

stmt_default
	: DEFAULT COLON
		{ $$ = std::make_unique<gsc::node_stmt_default>(std::to_string(*location)); }
	;

stmt_break
	: BREAK SEMICOLON 
		{ $$ = std::make_unique<gsc::node_stmt_break>(std::to_string(*location)); }
	;
stmt_continue
	: CONTINUE SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_continue>(std::to_string(*location)); }
	;

stmt_return
	: RETURN expr SEMICOLON	
		{ $$ = std::make_unique<gsc::node_stmt_return>(std::to_string(*location), std::move($2)); }
	| RETURN SEMICOLON
		{ $$ = std::make_unique<gsc::node_stmt_return>(std::to_string(*location), std::make_unique<gsc::node>()); }
	;

for_assign
	: expr_assign 						{ $$.as_node = std::move($1); }
	|									{ $$.as_node = std::make_unique<gsc::node>(); }
	;

for_cond
	: expr_cmp 							{ $$ = std::move($1); }
	|									{ $$.as_node = std::make_unique<gsc::node>(); }
	;

expr
	: expr_cmp							{ $$ = std::move($1); }
	| expr_ternary						{ $$ = std::move($1); }
	| expr_binary						{ $$ = std::move($1); }
	| expr_primitive					{ $$ = std::move($1); }
	;

expr_assign
	: object INCREMENT					{ $$ = std::make_unique<gsc::node_expr_increment>(std::to_string(*location), std::move($1)); }
	| object DECREMENT					{ $$ = std::make_unique<gsc::node_expr_decrement>(std::to_string(*location), std::move($1)); }
	| object ASSIGN expr				{ $$ = std::make_unique<gsc::node_expr_assign_equal>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_BITWISE_OR expr		{ $$ = std::make_unique<gsc::node_expr_assign_bitwise_or>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_BITWISE_AND expr	{ $$ = std::make_unique<gsc::node_expr_assign_bitwise_and>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_BITWISE_EXOR expr	{ $$ = std::make_unique<gsc::node_expr_assign_bitwise_exor>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_LSHIFT expr			{ $$ = std::make_unique<gsc::node_expr_assign_shift_left>(std::to_string(*location), std::move($1),std::move( $3)); }
	| object ASSIGN_RSHIFT expr 		{ $$ = std::make_unique<gsc::node_expr_assign_shift_right>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_ADD expr			{ $$ = std::make_unique<gsc::node_expr_assign_add>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_SUB expr			{ $$ = std::make_unique<gsc::node_expr_assign_sub>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_MULT expr			{ $$ = std::make_unique<gsc::node_expr_assign_mult>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_DIV expr			{ $$ = std::make_unique<gsc::node_expr_assign_div>(std::to_string(*location), std::move($1), std::move($3)); }
	| object ASSIGN_MOD expr 			{ $$ = std::make_unique<gsc::node_expr_assign_mod>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_cmp
	: expr OR expr						{ $$.as_node = std::make_unique<gsc::node_expr_or>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr AND expr						{ $$.as_node = std::make_unique<gsc::node_expr_and>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr EQUALITY expr				{ $$.as_node = std::make_unique<gsc::node_expr_equality>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr INEQUALITY expr				{ $$.as_node = std::make_unique<gsc::node_expr_inequality>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr LESS_EQUAL expr				{ $$.as_node = std::make_unique<gsc::node_expr_less_equal>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr GREATER_EQUAL expr			{ $$.as_node = std::make_unique<gsc::node_expr_greater_equal>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr LESS expr					{ $$.as_node = std::make_unique<gsc::node_expr_less>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr GREATER expr					{ $$.as_node = std::make_unique<gsc::node_expr_greater>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_ternary
	: expr_cmp QMARK expr COLON expr   	{ $$.as_node = std::make_unique<gsc::node_expr_ternary>(std::to_string(*location), std::move($1), std::move($3), std::move($5)); }
	;

expr_binary
	: expr BITWISE_OR expr				{ $$.as_node = std::make_unique<gsc::node_expr_bitwise_or>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr BITWISE_AND expr				{ $$.as_node = std::make_unique<gsc::node_expr_bitwise_and>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr BITWISE_EXOR expr			{ $$.as_node = std::make_unique<gsc::node_expr_bitwise_exor>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr LSHIFT expr					{ $$.as_node = std::make_unique<gsc::node_expr_shift_left>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr RSHIFT expr 					{ $$.as_node = std::make_unique<gsc::node_expr_shift_right>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr ADD expr						{ $$.as_node = std::make_unique<gsc::node_expr_add>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr SUB expr						{ $$.as_node = std::make_unique<gsc::node_expr_sub>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr MULT expr					{ $$.as_node = std::make_unique<gsc::node_expr_mult>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr DIV expr						{ $$.as_node = std::make_unique<gsc::node_expr_div>(std::to_string(*location), std::move($1), std::move($3)); }
	| expr MOD expr 					{ $$.as_node = std::make_unique<gsc::node_expr_mod>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_primitive
	: LPAREN expr RPAREN				{ $$ = std::move($2); }
	| COMPLEMENT expr					{ $$.as_node = std::make_unique<gsc::node_expr_complement>(std::to_string(*location), std::move($2)); }
	| NOT expr							{ $$.as_node = std::make_unique<gsc::node_expr_not>(std::to_string(*location), std::move($2)); }
	| expr_call							{ $$.as_node = std::move($1); }
	| expr_call_thread					{ $$.as_node = std::move($1); }
	| expr_function_ref					{ $$.as_node = std::move($1); }
	| expr_array						{ $$.as_node = std::move($1); }
	| expr_field						{ $$.as_node = std::move($1); }
	| expr_size 						{ $$.as_node = std::move($1); }
	| expr_vector						{ $$.as_node = std::move($1); }
	| expr_add_array					{ $$.as_node = std::move($1); }
	| vector							{ $$.as_node = std::move($1); }
	| num 								{ $$.as_node = std::move($1); }
	| data_localized_string				{ $$.as_node = std::move($1); }
	| data_string						{ $$.as_node = std::move($1); }
	| animref 			     			{ $$.as_node = std::move($1); }
	| identifier 						{ $$.as_node = std::move($1); }
	| empty_array						{ $$.as_node = std::move($1); }
	| undefined							{ $$.as_node = std::move($1); }
	| game 								{ $$.as_node = std::move($1); }
	| self 								{ $$.as_node = std::move($1); }
	| anim 								{ $$.as_node = std::move($1); }
	| level 							{ $$.as_node = std::move($1); }
	;

expr_call
	: expr_call_function				{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), false, std::make_unique<gsc::node>(), std::move($1)); }
	| expr_call_pointer					{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), false, std::make_unique<gsc::node>(), std::move($1)); }
	| object expr_call_function			{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), false, std::move($1), std::move($2)); }
	| object expr_call_pointer			{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), false, std::move($1), std::move($2)); }
	;

expr_call_thread
	: THREAD expr_call_function			{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), true, std::make_unique<gsc::node>(), std::move($2)); }
	| THREAD expr_call_pointer  		{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), true, std::make_unique<gsc::node>(), std::move($2)); }
	| object THREAD expr_call_function  { $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), true, std::move($1), std::move($3)); }
	| object THREAD expr_call_pointer 	{ $$ = std::make_unique<gsc::node_expr_call>(std::to_string(*location), true, std::move($1), std::move($3)); }
	;

expr_call_function
	: identifier LPAREN expr_arguments RPAREN
		{$$.as_func = std::make_unique<gsc::node_expr_call_function>(std::to_string(*location), std::make_unique<gsc::node_filepath>(std::to_string(*location), ""), std::move($1), std::move($3)); }
	| filepath DOUBLECOLON identifier LPAREN expr_arguments RPAREN
		{ $$.as_func = std::make_unique<gsc::node_expr_call_function>(std::to_string(*location), std::move($1), std::move($3), std::move($5)); }
	;

expr_call_pointer
	: LBRACKET LBRACKET expr RBRACKET RBRACKET LPAREN expr_arguments RPAREN
		{ $$.as_pointer = std::make_unique<gsc::node_expr_call_pointer>(std::to_string(*location), false, std::move($3), std::move($7)); }
	| CALL LBRACKET LBRACKET expr RBRACKET RBRACKET LPAREN expr_arguments RPAREN
		{ $$.as_pointer = std::make_unique<gsc::node_expr_call_pointer>(std::to_string(*location), true, std::move($4), std::move($8)); }
	;

expr_arguments
	: expr_arguments COMMA expr
		{ $$ = std::move($1); $$->list.push_back(std::move($3)); }
	| expr
		{ $$ = std::make_unique<gsc::node_expr_arguments>(std::to_string(*location)); $$->list.push_back(std::move($1)); }
	|
		{ $$ = std::make_unique<gsc::node_expr_arguments>(std::to_string(*location)); }
	;

expr_function_ref
 	: DOUBLECOLON identifier
	 	{ $$ = std::make_unique<gsc::node_expr_function_ref>(std::to_string(*location), std::make_unique<gsc::node_filepath>(std::to_string(*location), ""), std::move($2)); }
 	| filepath DOUBLECOLON identifier
	 	{ $$ = std::make_unique<gsc::node_expr_function_ref>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_array
	: object LBRACKET expr RBRACKET
		{ $$ = std::make_unique<gsc::node_expr_array>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_field
	: object DOT identifier
		{ $$ = std::make_unique<gsc::node_expr_field>(std::to_string(*location), std::move($1), std::move($3)); }
	;

expr_size
	: object DOT size
		{ $$ = std::make_unique<gsc::node_expr_size>(std::to_string(*location), std::move($1)); }
	;

expr_vector
	: LPAREN expr COMMA expr COMMA expr RPAREN 
		{ $$ = std::make_unique<gsc::node_expr_vector>(std::to_string(*location), std::move($2), std::move($4), std::move($6)); }
	;

expr_add_array
	: LBRACKET expr_arguments RBRACKET
		{ $$ = std::make_unique<gsc::node_expr_add_array>(std::to_string(*location), std::move($2)); }
	;

object
	: expr_call 		{ $$ = std::move($1); }
	| expr_array 		{ $$ = std::move($1); }
	| expr_field 		{ $$ = std::move($1); }
	| identifier 		{ $$ = std::move($1); }
	| level 			{ $$ = std::move($1); }
	| anim 				{ $$ = std::move($1); }
	| self 				{ $$ = std::move($1); }
	| game				{ $$ = std::move($1); }
	;

vector
	: LPAREN num COMMA num COMMA num RPAREN
		{ $$ = std::make_unique<gsc::node_vector>(std::to_string(*location), std::move($2), std::move($4), std::move($6)); }
	;

num
	: data_float 			{ $$ = std::move($1); }
	| data_integer 			{ $$ = std::move($1); }
	| false 				{ $$ = std::move($1); }
	| true 					{ $$ = std::move($1); }
	;

false 		: FALSE 		{ $$ = std::make_unique<gsc::node_integer>(std::to_string(*location), "0"); };
true 		: TRUE 			{ $$ = std::make_unique<gsc::node_integer>(std::to_string(*location), "1"); };
data_float 	: FLOAT 		{ $$ = std::make_unique<gsc::node_float>(std::to_string(*location), $1); };
data_integer : INTEGER 		{ $$ = std::make_unique<gsc::node_integer>(std::to_string(*location), $1); };
data_localized_string : STRING_LOC { $$ = std::make_unique<gsc::node_localized_string>(std::to_string(*location), $1); };
data_string : STRING 		{ $$ = std::make_unique<gsc::node_string>(std::to_string(*location), $1); };
animref 	: ANIMREF    	{ $$ = std::make_unique<gsc::node_animref>(std::to_string(*location), $1); };
identifier 	: IDENTIFIER 	{ $$ = std::make_unique<gsc::node_identifier>(std::to_string(*location), $1); };
filepath 	: FILEPATH 		{ $$ = std::make_unique<gsc::node_filepath>(std::to_string(*location), $1); };
empty_array : EMPTY_ARRAY 	{ $$ = std::make_unique<gsc::node_empty_array>(std::to_string(*location)); };
undefined 	: UNDEFINED 	{ $$ = std::make_unique<gsc::node_undefined>(std::to_string(*location)); };
size 		: SIZE 			{ $$ = std::make_unique<gsc::node_size>(std::to_string(*location)); };
game 		: GAME 			{ $$ = std::make_unique<gsc::node_game>(std::to_string(*location)); };
self 		: SELF 			{ $$ = std::make_unique<gsc::node_self>(std::to_string(*location)); };
anim 		: ANIM 			{ $$ = std::make_unique<gsc::node_anim>(std::to_string(*location)); };
level 		: LEVEL 		{ $$ = std::make_unique<gsc::node_level>(std::to_string(*location)); };

%%

void H1::parser::error(const std::string& msg)
{
    GSC_COMP_ERROR("%s", msg.data());
}
